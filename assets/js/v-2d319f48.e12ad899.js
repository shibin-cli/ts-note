"use strict";(self.webpackChunkts_note=self.webpackChunkts_note||[]).push([[66],{175:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2d319f48",path:"/base/prototype.html",title:"原型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"base/prototype.md",git:{updatedTime:1636556817e3,contributors:[{name:"shibin",email:"shibiny6@gmail.com",commits:1}]}}},602:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(252).uE)('<h1 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h1><p>原型上所有方法和实例都可以被构造函数的实例共享</p><p>函数和构造函数的区别</p><ul><li>通过new 函数() ，此刻的这个函数就是构造函数</li><li>函数() 就是一个函数</li></ul><p>原型是定义函数有js自动分配给函数的一个可以被所有构造函数实例对象变量共享的对象变量</p><p>实例上的__proto__可以访问到上一级原型对象的空间地址</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age\n    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex\n    <span class="token comment">// this.say = function(){</span>\n    <span class="token comment">//     console.log(`My name is ${this.name}, ${this.age} years old`)</span>\n    <span class="token comment">// }</span>\n<span class="token punctuation">}</span>\nUser<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Shibin&#39;</span>\n<span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token string">&#39;User&#39;</span>\nUser<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;shibin&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;boy&#39;</span><span class="token punctuation">)</span>\nuser<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//My name is shibin</span>\nuser<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//My name is User</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>常见的问题</p><ul><li>增加或修改原型对象的属性或方法后，所有实例或对象立即可以访问的到</li><li>创建实例后再覆盖原型，实例对象无法访问到，为什么？</li></ul>',9),t={},e=(0,a(744).Z)(t,[["render",function(n,s){return p}]])},744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);